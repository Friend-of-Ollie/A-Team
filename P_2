#!/usr/bin/perl

# enzyme_digester_IX.pl
#  - digests amino acid sequences
use strict;
#use strict for good coding
use Getopt::Long qw(GetOptions);
#use Getopt for command line style options
use POSIX qw(strftime);
#use POSIX for timestamp
GetOptions(
	'a'=>\my $a,
	'i=s'=>\(my $ifilename=""),
	'l'=>\my $l,
	'o:s'=>\(my $ofilename),
	't'=>\my $t,
	'v'=>\my $v
) or die "Error: Missing arguments!\n";
my $title;
#Initialise Getopt options
#i is mandatory (input file name)
#o is optional (modified output file name)
if (!$ifilename && !$a && !$l && !$t && !$v) {
	print "Error: Arguments missing!\nP_2 [-i][your file] [-a] [-l] [-t] [-v] [-o][custom output name] (optional, uses timestamp as default)\n";
	exit;
}
elsif (!$ifilename) {
	print "Error: Specify filename!\n";
	exit;
}
#Error message if -i (input filename) is not set
elsif (!$a && !$l && !$t && !$v) {
	print "Error: Specify enzyme option!\n";
	exit;
}
#Error message is no enzyme option is set)
#Idiot-proofing to force options
my $datestring = strftime ('%Y-%m-%d_%H-%M-%S', localtime);
#Calculate current time in YY-MM-DD_HH-MM-SS format to create unique
#file names
if ($ofilename) {
	$title=$ofilename;
}
else {
	$title=$datestring;
}
#Allows user to set title_enzyme.fasta, else reverts to 
#datestring_enzyme.fasta
my ($fh, $headercount, @values, $fragment, $fragcount, $info, @fastas, @headerlist, $currentfragment, $resultshandle)=();
#Initialise file reading, fasta single line processing, fragment count
#and results storage
#my $ifilename = shift or die "No filename supplied!\n";
my $data="$ifilename";
{
  local $/=undef;
  open FILE, "$data" or die "Error: Couldn't open file: $!";
  $info = <FILE>;
  close FILE;
}
#Load entire file into program (would use Slurp but it's not on Tal)
#Consider version with Slurp for later usage?
$info=~ s/>/<>/g;
my @fastas = split('<', $info);
shift @fastas;
#Locate individual entries within a file by looking for > and splits
#each into individual array elements
#Former version inserted _ but this accidentally froze the program
#when headers naturally used them (Thanks Max(!))
if ($a) {
	open($fh, '>', "$title\_Endoproteinase_Arg-C.fasta");
#Open file to save to, using date and enzyme choice to make unique
#file name
	print "Endoproteinase Arg-C digestion\n\n";
#Control statement to confirm choice
}
if ($l) {
	open($fh, '>', "$title\_Endoproteinase_Lys-C.fasta");
#Open file to save to, using date and enzyme choice to make unique
#file name
	print "Endoproteinase Lys-C digestion\n\n";
#Control statement to confirm choice
}
if ($t) {
	open($fh, '>', "$title\_Trypsin.fasta");
#Open file to save to, using date and enzyme choice to make unique
#file name
	print "Trypsin digestion\n\n";
#Control statement to confirm choice
}
if ($v) {
	open($fh, '>', "$title\_V8_protease.fasta");
#Open file to save to, using date and enzyme choice to make unique
#file name
	print "V8 protease digestion\n\n";
#Control statement to confirm choice
}
#New enzyme options can be added by c/p-ing and modifying existing code
#Getopt is not case-sensitive, future commands may need to be more than
#one character
foreach my $singlefast (@fastas) {
	open $resultshandle, '<', \$singlefast;
#Reads multiline element line by line by treating it as a file (yes, 
#perl can do that)
	my ($line, %hash, $header, $seq)=();
	my ($pepnum, $fragnum)=1;
#Initialise local variables which need resetting every entry cycle
	while (defined ($line = <$resultshandle>)) {
		chomp $line;
		if ($line=~m/^>/) {
			$header = $line;
		}
#Find entry header and save it
		else {
			if ($header) {
				$hash{$header} .= $line;
			}
		}
	push @headerlist, $header;
#Push chomped non-header lines into a hash
	}
	for $header (keys %hash) {
		$seq = $hash{$header};
		if ($a) {
			$seq=~ s/R(?!P)/R</g;
		}
#Endoproteinase Arg-C digestion: cut after R (Arginine), except after 
#P (Proline)
		if ($l) {
			$seq=~ s/K(?!P)/K</g;
		}
#Endoproteinase Lys-C digestion: cut after K (Lysine), except after P 
#(Proline)
		if ($t) {
			$seq=~ s/K(?!P)/K</g;
			$seq=~ s/R(?!P)/R</g;
		}
#Trypsin digestion: cut after K (Lysine) and R (Arginine), except 
#after P (Proline)
		if ($v) {
			$seq=~ s/E(?!P)/E</g;
		}
#V8 protease digestion: cut after E (Glutamate), except before P 
#(Proline)
		my @x_values = split('<', $seq);
		undef(@values);
		push(@values, @x_values);
	}
#Push data into another array so that it can be moved out of local scope
	foreach my $val (@values) {
		print $fh "$header peptide $pepnum\n$val\n";
		$pepnum++;
	}
#Print normal peptide fragments to file
	$fragcount=scalar(grep $_, @values);
	$fragcount--;
	$fragnum=1;
	until ($currentfragment eq $fragcount) {
		$fragment=join("",$values[$currentfragment],$values[$currentfragment+1]);
		$currentfragment++;
		print $fh "$header missed cleavage fragment $fragnum\n$fragment\n";
		$fragnum++;
	}
	$currentfragment=0;
#Print missed cleavage fragments to file
close $resultshandle;
#Close array element to either move onto the next one or finish
}
#Will run each entry, producing regular fragments, then missed digestion
#fragments for each cyle
print "Complete!\n";
close $fh;
exit;
#Processing complete, close print file and exits program
